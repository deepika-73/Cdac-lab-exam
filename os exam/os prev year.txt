Q1. Write a shell scirpt to print the given three digit number is armstrong number or not.
=>
#!bin/bash
echo -n "ENter a number: "
read num
sum=0
num1=$num
while [ $num -ne 0 ]
do
        d=$[ $num % 10 ]
        sum=$[ $sum + $(( d * d * d)) ]
        num=` expr $num / 10`
done

if [ $sum -eq $num1 ]
then
        echo "Armstrong"
else
        echo "Not"
fi
............................................................................................................................................
Q2. Write a program that will create two thread. Each thread should append the table of 2 in an array.
=>#include <pthread.h>
#include <stdio.h>

int arr[10];
int count=1;
pthread_mutex_t m1; 

void *table_of_two(int *a)
{
        for(count=1;count<10;count++)
        {
        pthread_mutex_lock(&m1);
        printf("%d Thread\n",*a);
        arr[count-1]=2*count;
        printf("arr[%d]=%d\n",count-1, arr[count-1]);
		pthread_mutex_unlock(&m1);					
        }
                 	  
}

int main()
{
		int a=1,b=2;
        pthread_t tid1,tid2;    
		pthread_mutex_init(&m1,NULL); 
        pthread_create(&tid1,NULL,&table_of_two,&a);    
        pthread_create(&tid2,NULL,&table_of_two,&b);
        pthread_join(tid1,NULL);
        pthread_join(tid2,NULL);
        

        int i;
        for(i=0;i<10;i++)
        {
        printf(" from main %d\n",arr[i]);
        }
        
        pthread_mutex_destroy(&m1);
       

}

...........................................................................................................................................
Q3.Write a program that will create the 3 child process.Allow communication in all three child
 process using named pipe.
=>
#include<stdio.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/wait.h>
#include<fcntl.h>
#include<string.h>

int main()
{

	pid_t pid[3];
	int wstatus;
	int flag=0;
	int pipe= mkfifo("mypipe",O_CREAT | 0666);
	if(pipe<0)
		return -2;
	for(int i=0;i<3;i++){
	
		pid[i]=fork();
		
		if(pid[i]<0){
			printf("Process creation failed\n");	
		}
		if(pid[i]==0){
			printf("Process creation \n");
			flag=0;
			if(i==0){
				char name[100],prn[100];
				int fd = open("mypipe",O_WRONLY);
				printf("enter name ");
				scanf("%s",&name);
				
				write(fd,name,sizeof(name));
			
				printf("\nenter prn ");
				scanf("%s",&prn);
				write(fd,prn,sizeof(prn));
				close(fd);	
			}
			if(i==1){
				sleep(2);
				char name1[100];
				int fd1 = open("mypipe",O_RDONLY);
				read(fd1,name1,sizeof(name1));
				printf("\nname=%s",name1);
				close(fd1);
			}
			if(i==2){
				sleep(4);
				char name2[100];
				int fd2 = open("mypipe",O_RDONLY);
				read(fd2,name2,sizeof(name2));
				printf("\nprn=%s",name2);
				close(fd2);
			}
			
			break;
			
		}

		if(pid[i]>0){
			flag=1;
			}
	}
	if(flag==1){
		sleep(10);
		waitpid(-1,&wstatus,0);
		if(WIFEXITED(wstatus)){
		printf("Child exited normally\n");
		}
	}
	
	return 0;
}
 

--------------------------------------------------------------------------------------------------------------------------------------------
Q1. Write a shell script to find given number is prime number or not.
=>
#!bin/bash
echo -n "ENter a number: "
read num
sum=0
num1=2
flag=0
while [ $num1 -ne $(( num / 2 )) ] 
do
        if [ $(( num % num1 )) -eq 0 ]
        then
                flag=1;
                break;
        fi
        num1=` expr $num1 + 1`
done

if [ $flag -eq 1 ]
then
        echo "prime"
else
        echo "Not"
fi

.................................................................................................................

Q2. Write a program to create 3 child process.First child process should print the output of ls command,
Second child should print the calander and thoird child should print Your Name.

#include<stdio.h>
#include<unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main()
{

	pid_t pid[3];
	int wstatus;
	int i=0;
	int flag=0;
	for(i=0;i<3;i++)
	{
		pid[i]=fork();

		if(pid[i]<0)
		{
			printf("Process creation failed\n");
		}
		if(pid[i]==0)
		{

			if(i==0)
				execl("/bin/ls","ls",NULL);
			if(i==1)
				execl("/usr/bin/cal","cal",NULL);
			if(i==2)
				execl("/bin/echo","echo","Shikha",NULL);

			break;
		}
		if(pid[i]>0)
		{
		
			printf("child id:%d\tparent id:%d\n",getpid(),getppid());

		}
	}
	waitpid(-1,&wstatus,0);
	if(WIFEXITED(wstatus))
	{
		printf("All child process exited normally\n");
	}
	
	sleep(5);
	return 0;
}

..................................................................................................................
Q3. Write a program to implement unnamed pipe and send you name and prn from child to parent process.
=>
#include<stdio.h>
#include<unistd.h>
#include<sys/wait.h>
#include<sys/types.h>
#include<string.h>

int main()
{
	pid_t pid;
	int fd[2];

	int res=pipe(fd);
	if(res<0)
	{
		printf("Failed\n");
		return -1;
	}

	pid=fork();
	if(pid<0)
	{
		printf("Failed\n");
		return -1;
	}

	if(pid==0)
	{
		char name[100],prn[100];
		close(fd[0]);
		printf("Enter name\n");
		scanf("%s",&name);
		write(fd[1],name,strlen(name)+1);
		printf("Enter prn \n");
		scanf("%s",&prn);
		write(fd[1],prn,strlen(prn)+1);
		close(fd[1]);
	}

	if(pid>0)
	{
		
		char name1[100],prn1[100];
		close(fd[1]);
		read(fd[0],name1,sizeof(name1));
		sleep(3);
		read(fd[0],prn1,sizeof(prn1));
		printf("%s\n%s\n",name1,prn1);
		close(fd[0]);
	}

	return 0;
}
--------------------------------------------------------------------------------------------------------------------------------------------------

Q1. Write a shell script to find the given year is leap year or not.
=>
#!/bin/bash
echo "FIND LEAP YEAR"
echo ENTER YEAR
read y
if [ $(( y%4 )) -eq 0 -a $(( y%100 )) -ne 0 -o $(( y%400 )) -eq 0 ]
then
        echo LEAP YEAR
else
        echo NOT A LEAP YEAR
fi

...............................................................................................................................................
Q2. Write a program to implement shared memory. Write a structure containing you name and prn
	from one to process another
	
=>Reader:


#include<string.h>
#include <sys/ipc.h> 
#include <sys/shm.h> 
#include <stdio.h> 
 
    struct message
    {
	    char name[100];
	    char prn[100];
    };
  
int main() 
{
	struct message *msg;
    // ftok to generate unique key 
    key_t key = ftok("shmfile",65); 
  
    // shmget returns an identifier in shmid 
    int shmid = shmget(key,1024,0666|IPC_CREAT); 
  
    // shmat to attach to shared memory 
   msg = (struct message*)shmat(shmid,(struct message*)0,0); 
  
    printf("Write Name: "); 
    scanf("%s",&msg->name);
    
    printf("Write Prn: "); 
    scanf("%s",&msg->prn);
    printf("Data written in memory: %s,%s\n",msg->name,msg->prn); 
      
    //detach from shared memory  
    shmdt(&msg); 
  
    return 0; 
} 

.....................................................................................................
Writer:

#include<string.h>
#include <sys/ipc.h> 
#include <sys/shm.h> 
#include <stdio.h> 
    struct message
    {
            char name[100];
            char prn[100];
    };
  
int main() 
{  struct message *msg;

    // ftok to generate unique key 
    key_t key = ftok("shmfile",65); 
  
    // shmget returns an identifier in shmid 
    int shmid = shmget(key,1024,0666|IPC_CREAT); 
  
    sleep(10);
    // shmat to attach to shared memory 
    msg = (struct message*)shmat(shmid,(struct message*)0,0); 
  
    printf("Data read from memory: \n%s\n%s\n",msg->name,msg->prn); 
      
    //detach from shared memory  
    shmdt(&msg); 
    
    // destroy the shared memory 
    shmctl(shmid,IPC_RMID,NULL); 
    return 0; 
} 


.........................................................................................................................
Q3. Write a program to create two child process.And use waitpid to print signal number that is used
 to kill process.First child process will print your name and second child process  print your prn.
=>

#include<stdio.h>
#include<unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include<signal.h>

void my_signal_interrupt(int sig) 
{ 
	printf("I got signal %d\n", sig); 
	(void) signal(SIGCHLD, SIG_DFL); 
} 

int main()
{
	pid_t pid[2];
	int wstatus;
	int i=0;
	int flag=0;
	for(i=0;i<2;i++)
	{
		pid[i]=fork();

		if(pid[i]<0)
		{
			printf("Process creation failed\n");
		}
		if(pid[i]==0)
		{
			
			//while(1);
			if(i==0)
				execl("/bin/echo","echo","Shikha",NULL);
			if(i==1)
				execl("/bin/echo","echo","058",NULL);

			break;
		}
		if(pid[i]>0)
		{
			//kill(pid[0],SIGSTOP);
			printf("child id:%d\tparent id:%d\n",getpid(),getppid());

		}
	}
	for (i=0; i<2; i++) 
	{ 
		pid_t cpid = waitpid(pid[i], &wstatus, 0); 
		if (WIFEXITED(wstatus))
		{ 
			printf("Child %d terminated with status: %d\n", cpid, WEXITSTATUS(wstatus)); 
			(void) signal(WEXITSTATUS(wstatus),my_signal_interrupt);
		}
	} 

	sleep(5);
	return 0;
}



--------------------------------------------------------------------------------------------------------------------------------------------
Q1. Write a shell script to that will read comma seperated your details from a file and print on the Standard output.
=>
#!bin/bash
echo -n "Enter file name: "
read name
while read line
do
    arr=$(echo $line | tr "," "\n")
    for x in $arr
    do
        echo "$x"
    done
done < $name


........................................................................................................................................
Q2. Write a program to implemnt the four different signal handler for SIGNINT ,SIGSTP,SIGQUIT and SIGTERM. 
Each handler will printing ‘Signal No is handled’.
=>#include<stdio.h>
#include<signal.h>
#include<unistd.h>
#include<string.h>


void handler(int sig_no)
{
	printf("We are handling: %d\n", sig_no);
}

int main()
{
	int i=0;
	struct sigaction sig_act, sig_act1;

	//memset(&sig_act, 0, sizeof (struct sigaction));
	sig_act.sa_handler = handler;
	
	sigaction(SIGINT, &sig_act, (void *)0);
	sigaction(SIGQUIT, &sig_act, (void *)0);
	sigaction(SIGTSTP, &sig_act, (void *)0);
	sigaction(SIGTERM, &sig_act, (void *)0);

	while(1)
	{
		printf("%d\n", i++);
		sleep(1);
	}
	return 0;
}

........................................................................................................................................

Q3. Write a program to implement the named pipe to copy structure containing your name and prn from one
process to another. And both process should  completely unrelated
=>Writer:
#include<stdio.h>
#include<unistd.h>
#include<string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

struct detail
{
        char name[100];
        char prn[100];
};


int main()
{
	int ret = mkfifo("mypipe2", O_CREAT | 0666);

	if (ret < 0)
	{
		printf("mkfifo command failed\n");
		return -2;
	}

	printf("mkfifo success... \n");
	struct detail mydetail;

	int fd = open("mypipe2", O_WRONLY);

	printf("Enter your name\n");
	scanf("%s", mydetail.name);
	
	printf("Enter your prn\n");
	scanf("%s", mydetail.prn);

	//int len=strlen(mydetail->name)+strlen(mydetail->prn)+2;
	write(fd, &mydetail,sizeof(mydetail));
	close(fd);
	
	return 0;

}

...............................................................................
Reader:
#include<stdio.h>
#include<unistd.h>
#include<string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

struct detail
{
	char name[100];
	char prn[100];
};

int main()
{
	struct detail mydetail;
	
	int fd = open("mypipe2", O_RDONLY);

	read(fd, &mydetail, sizeof(mydetail));
	printf("Pipe had: %s,%s\n", mydetail.name,mydetail.prn);

	close(fd);

	return 0;

}


----------------------------------------------------------------------------------------------------------------------------------------